// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique @db.VarChar(30)
  password String  @db.VarChar(72)
  email    String?
  role     Role    @default(USER)
  todos    Todo[]
  carts    Cart[]
  Order    Order[]

  @@map("users")
}

model Todo {
  id        Int       @id @default(autoincrement())
  title     String    @db.VarChar(150)
  status    Status    @default(PENDING)
  dueDate   DateTime  @map("due_date") @db.Date
  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime? @map("updated_at") @db.Timestamp(0)

  @@map("todos")
}

enum Status {
  PENDING
  DOING
  DONE
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  img         String
  description String
  price       Int         @default(0)
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart_items  Cart_item[]
  categoryId  Int
}

model Category {
  id            Int       @id @default(autoincrement())
  category_name String
  products      Product[]
}

model OrdersItem {
  id          Int       @id @default(autoincrement())
  cart_Item   Cart_item @relation(fields: [cart_itemId], references: [id])
  cart_itemId Int
  order       Order     @relation(fields: [orderId], references: [id])
  orderId     Int
}

model Order {
  id         Int          @id @default(autoincrement())
  dueDate    DateTime     @map("due_date") @db.Date
  cart       Cart         @relation(fields: [cartId], references: [id])
  status     OrderStatus  @default(UNPAID)
  user       User         @relation(fields: [userId], references: [id])
  userId     Int
  cartId     Int
  OrdersItem OrdersItem[]
}

enum OrderStatus {
  UNPAID
  CANCELLED
  SUCCESS
}

model Cart {
  id         Int         @id @default(autoincrement())
  total      Int         @default(0) @map("total")
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cart_items Cart_item[]
  userId     Int

  Order Order[]
}

model Cart_item {
  id        Int          @id @default(autoincrement())
  quantity  Int          @default(1)
  cart      Cart         @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  Orders    OrdersItem[]
}
